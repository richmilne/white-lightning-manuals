                              WHITE LIGHTNING
                                CHEAT SHEET

This sheet is intended as a supplement to the User Manual and is provided only to
"get you started".  The best way to use it is to type in the source code at the
end of this section and execute the appropriate section as you go.  You will need
the demonstration sprites in memory but sprites 25 to 255 should be deleted to
make enough memory available.  A word to do this is:

: CLRS 256 25 DO I SPN ! TEST IF DSPRITE ENDIF LOOP ; <CR>
Type this in then type CLRS <CR>

It is also worth deleting the large sprites 9, 12, 13 and 14 using:

 9 SPN ! DSPRITE <CR>
12 SPN ! DSPRITE <CR>
13 SPN ! DSPRITE <CR>
14 SPN ! DSPRITE <CR>

where <CR> means press ENTER.  After execution CLRS should be FORGOTTEN using
FORGET CLRS <CR>

Following the example source there is a listing of a complete game. You won't be
able to run it without the sprites but we can provide a tape with the source and
sprites for one pound seventy five pence if you think it would to helpful.


Creating Large Sprites

Quite often in games writing large sprites are required which may extend across
several screens.  The sprite development software can produce sprites with
dimensions of up to 15 by 15 characters.  Larger sprites need to be constructed in
the White Lightning itself.

The sample listing for the Lunar Lander contains a routine which we can use as an
example.  The Sprite Development Program was used to produce 16 sprites, each was
3 high by 8 wide, having sprite numbers 10 to 25.  The following routine sets up
sprite 128 which is 3 high by 128 wide, and then fills it with the 16 small
sprites before deleting them to save memory.

SCR#8
0 : MAKE 128 SPN ! 3 HGT ! 128 LEN ! 0 SROW ! 128 SP2 ! ISPRITE
1 16 0 DO I 10 + DUP SPN ! SP1 ! I 8 * SCOL ! GWBLM GWATTM DSPRITE
2 LOOP ;

Line 0 just defines the big sprite in memory and sets SROW to 0.

Line 1 loops round 16 times with I taking the values 0 to 15. I 10 + calculates
the sprite number of the smaller sprite and I 8 * calculates the column in the big
sprite that this smaller sprite is to be put into.  GWBLM GWATTM moves the pixel
data, then the attributes, from the individual small sprites into the big sprite.
You won't be able to execute this example without the 16 3 by 8 sprites but it
illustrates how big sprites are achieved.