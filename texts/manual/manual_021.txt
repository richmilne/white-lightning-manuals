If we use just . we will get a negative result.

      HEX C000 . <CR>

will print -4000


**?**       :  Print the value contained at the address on top of the stack using the
           current base.

Suppose the top of the stack contains FF40H, location FF40/41H contains 0014H, and
current BASE is 10 (DECIMAL), then ? will print 20 which is the decimal equivalent
of 14 Hex.


**TYPE**    :  This uses the top TWO numbers held on the stack and will print a
           selected number of characters starting at a specific
           address onto the screen.  The top number on the stack is the
           character count and the second number is the address to
           start at.

e.g.    HEX 6100 20 TYPE <CR>
(Note that 6100H is pushed onto the stack and 20H is pushed on top of it 20H =
TOP; 6100H = second).  This will print 20H (32) ASCII characters corresponding to
the data starting at address 6100H . (Note that much of the output will be
unrecognisable unless the data contains correct ASCII codes, such as for numbers
and letters).


**DUMP**    :  This takes the top number on the stack and prints out 80H bytes
           starting at this address.


**"**       :  This is used in the form ." character string " and will display
           the string contained within " " on the screen.

e.g.   ." THIS IS A CHARACTER STRING " <CR>
will put THIS IS A CHARACTER STRING on the screen.  Note the spaces between the
string and the quotes.


**SPACE**   :  This will display a single blank/space on the screen.


**SPACES**  :  This will display n spaces on the screen, where n is the number on the
           top of the stack.

e.g.    DECIMAL 10 SPACES <CR>
will print 10 spaces on the screen.


**2. MATHEMATICAL OPERATORS**

**+**       :  This will add the top two numbers on the stack and leave the result
           as a single number.

e.g.    1 2 + . <CR>
will print the value of 1 + 2 = 3 on the screen.  Note that the two top numbers
are removed from the stack, being replaced by a single number - this is true of
most Forth commands, in that they remove the values which they require to use from
the stack and push the result onto the stack.