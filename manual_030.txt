# TODO: Remove this comment once this file has been proofread

0=	. This ll leave a true flag on the top of the stack if the number on the top of the stack is equal to zero, otherwise it will leave a false flag.


<	: This will leave a true flag if the second number on the stack is less
than the top number, otherwise it will leave a false flag.

e.g.	40 25 < . <CR> will print 0 (false flag).

If we look at the stack during this operation we will see:

Operation 'II)5 40 40 25	40 25
<	0
.	empty


>	: This will leave a true flag if the second number on the stack is greater than the top number, else a false flag will be left.

e.g.	40 25 > . «72> will print 1 (true flag).


_	. This will leave a true flag if the two top numbers are equal, otherwise it will leave a false flag.

Now for some examples using the oo:rlitional branching structures, type:: TEST= = IF " BD4H ARE EQUAL " ENDIP . " FINISHED " ; <Q(> Now key in two numbers followed by •its(ti and a carriage return.

e.g.	11 119	- «R> This will print FINISHED

119 119 TEST-- <CR>
will print BOTH ARE EQUAL FINISHED

Now key in:
: TE5T1= = IF . " EQUAL " ELSE " UNEQUAL " QNDIF Q2 . " FINISHED " ; <CR>

Now key in:
249 249 TEST1= <Q2> this will print EQUAL FINISHED

Try:	249 248 TBST1= <CR> this will print UNEQUAL FINISHED

Notice how the part after IIiDiF was executed in both cases. Tw more loop structures will now be discussed29
11 GIN •••• (Forth WORDS) .... UNTIL

~i GIN .... (Forth WARDS) .... WHILE .... (Forth hORW) .... REPEAT

,i:1g the 10GIN .. UNTIL the value at the top of the Stack is tested upon l,ichi.ng UNTIL. If the flag is false (0) then the loop starting from BEGIN is I :-ted. If the value is true (non-zero) then an exit from the loop cccurs.

'~y Lyping the following example:

: OOUNf-DOWN DECIMAL 100 BEGIN 1- DOP CUP . Q2 0= UNTIL ." CONE ";<C12>

vow key in: COUNTDOWN <CR>
rhis will print: 99
98
3 2 1 0
i IONE

the BEGIN ... WHILE ... REPEAT structure uses the MILE condition to abort a loop in the middle of that loop. MILE will test the flag left on top of the stack and ; that flag is true, will continue with the execution of words up to REPENT, ahich then branches always (unconditionally) tack to Fg7GTN. If the flag is false, then WHILE will cause execution to skip the words up to RE?EAT and thus exit from the loop.

4e will now construct a program to print out the cubes of numbers from I upwards, until the cube is greater than 3000.

tt~ colon definition could be as follows:

: CUBE DECIMAL 0 BEGIN 1+ <CR>
XP IXR' CIIP WP * * DI1P <CR>
3000 < WHILE ." TF~ CUBE OF " <Cii> ~NW . " IS " . CR REPEAT <(72>
LROP CROP CROP ." ALL WHO	1t ; <(1t>

You way get an error message "NHG*4" appearing on the screen; this means that the word you have just created already exists. This is not a problem since the new word will be created, and all actions referencing the Word CUBE will be directed to the latest definition using that name.

Now run this by keying in: CUBE <CR>

and watch the results.

Try to follow what is happening by writing down the values on the stack at each operation. If you are having any difficulty in doing this, the stack values are shown below.
30