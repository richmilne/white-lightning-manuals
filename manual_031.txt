       **STACK**            **OPERATION**           **OUTPUT (if any)**

        empty            DECIMAL
        0                0
        0                BEGIN
        1                1+

(let us now refer to the number on the stack as N)

      N N                DUP
    N N N                DUP
  N N N N                DUP
N N N N N                DUP
  N N N N²               *
    N N N³               *
  N N N³N³               DUP
N N N³N³3000             3000
  N N N³flag (1 or 0)    <

If TRUE:

    N N N³               WHILE
                         ." THE CUBE OF "   THE CUBE OF
    N N³N                SWAP
      N N³               .                   N
                         ." IS "             IS
        N                .                   N³
        N                CR                  carriage return
        N                REPEAT              (branch back to BEGIN)

If FALSE:

      N N                DROP
        N                DROP
    empty                DROP
                         ." ALL DONE "       ALL DONE
                         CR
                         ;

In fact, it is a good idea to check the stack contents during the execution of any
new Forth word to make sure that it is working correctly.  (Note that DROP merely
clears the top number from the stack).

Finally, one extra construct has been added to circumvent the problem of deeply
nested IF...THEN...ELSE structures.  This is the CASE OF structure. It takes the
general form :

CASE n1 OF (Forth Word) ENDOF n2 OF (Forth Word) ENDOF ... END CASE

For example type:

: TEST4 CASE 1 OF ." FIRST CASE " ENDOF 2 OF ." SECOND CASE " ENDOF 3 OF ." THIRD
CASE " ENDOF END CASE ; <CR>

Now type :

1 TEST4 CR 2 TEST4 CR 3 TEST4 CR <CR>