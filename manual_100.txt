BEGIN                  --- addr n (compilation)         P,L0

Occurs in a colon-definition in form:
              BEGIN  ...  UNTIL
              BEGIN  ...  AGAIN
              BEGIN  ...  WHILE  ...  REPEAT
At run-time, BEGIN marks the start of a sequence that may be repetitively
executed.  It serves as a return point from the corresponding UNTIL, AGAIN or
REPEAT.  When executing UNTIL, a return to BEGIN will occur if the top of the
stack is false; for AGAIN and REPEAT, a return to BEGIN always occurs.

At compile time BEGIN leaves its return address and n for compiler error checking.


BL                     --- c

A constant that leaves the ASCII value for blank.


BLANKS      addr count ---

Fill in an area of memory beginning at addr with blanks.


BLK                    --- addr                           L0

A user variable containing the block number being interpreted.  If zero, input is
being taken from the terminal input buffer.


BLOCK                n --- addr                           L0

Leave the memory address of the block buffer containing block n.  If the block is
not already in memory, it is transferred from disc to whichever buffer was least
recently written.  If the block occupying that buffer has been marked as updated,
it is re-written to disc before block n is read into the buffer. See also BUFFER,
R/W UPDATE FLUSH.


BRANCH                                                 C2,L0

The run-time procedure to unconditionally branch.  An in-line offset is added to
the interpretive pointer IP to branch ahead or back.  BRANCH is compiled by ELSE,
AGAIN, REPEAT.


BUFFER               n --- addr

Obtain the next memory buffer, assigning it to block n.  If the contents of the
buffer are marked up as updated, it is written to the disc.  The block is not read
from the disc.  The address left is the first cell within the buffer for data
storage.


C!              b addr ---

Store 8 bits at address.