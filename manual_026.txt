C@      :  This will fetch the single byte held at the address at the top of the
           stack - this single byte will be pushed on the stack as a 16
           bit number, but with the high byte set to zero.

with reference to the memory contents shown previously,
if we key in C000 C@ . <CR>

this will print FF (and not FF00 as with @)


+!      :  This will add the number held in the second number of the stack, to
           the value held at the address on the top of the stack (Pronounced
           "Plus-store").

e.g.    4 HEX C000 +! <CR>
will add 4 to the value at C000/C001
As will be shown later, this is of use when using variables in White Lightning.


5. COLON DEFINITIONS

These are the most powerful and most used forms of data structures in White
Lightning, and are so called because they begin with a colon ":"

Colon definitions allow the creation of new Forth words based on previously
defined words.  They can be of any length, although carriage return must be
pressed before a particular section exceeds 80 characters.

The general format is:

:  new-word  word1  word2.....  wordn  ;

All colon definitions end with a semi-colon  ";"

If a word used in a colon definition has not been previously defined, then an
error will result.

The new-word is executed simply by typing its name and pressing ENTER.

e.g.    Suppose we wish to define a new word to calculate the square of a given
number.

We could do this by:

: SQUARE DECIMAL CR ." THE SQUARE OF " DUP . ." IS " DUP * . ; <CR>

Here we have defined a new word called SQUARE which will be called by

number SQUARE <CR>

e.g.    9 SQUARE <CR>

will result in:

THE SQUARE OF 9 IS 81

If we follow the operation of the word, we will see the changes in the stack: