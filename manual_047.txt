15.  If a word ending in V (screen operation) does not execute, it is almost
     always because the window you have defined does not lie wholly on the
     screen.  That is to say, that COL + LEN is not in the range 1 to 32, or
     ROW + HGT is not in the range 1 to 24.  See ADJV.

16.  If a word ending in S (screen/sprite operation) does not execute, then
     again, it is almost always because the sprite width + COL is not in the
     range 1 to 32 or the sprite height + ROW is not in the range 1 to 24.
     See ADJM.

17.  If a word ending in S that is also a window command (second letter W)
     does not execute, it may be for the reasons outlined in 16, or it may be
     that SCOL + LEN or SROW + HGT do not lie within the width and height of
     the sprite containing the window.

18.  If a word ending in M that is not a window command does not execute,
     the sprite probably does not exist; if it is a window command, then it
     is likely that the width of the first sprite + ROW or the height of the
     first sprite + SCOL do not lie within the width and height of the
     sprite containing the window.

19.  Remember that the SPIN command needs a second sprite to rotate into,
     and that its dimensions should be the reverse of the sprite to be
     spun.  For real speed, it is best to store the sprite in each of its
     4 orientations.

20.  If you wish to do a vertical mirror, just SPIN, do a horizontal
     mirror, and SPIN back.

21.  It is good policy always to mike the sprite one character higher and
     wider than the graphic character itself; this will enable you to scroll
     the character within the sprite and give pixel resolution when using
     the PUT commands.

22.  If memory permits, it is a good idea to keep a "back-up" of each sprite
     held under a different number, so that if an error is made and a sprite
     corrupted, it can he copied back from the copy.  They can always be deleted
     from the final program.

23.  Never execute the NEW or CLEAR commands when in BASIC.

24.  If a sprite driven under interrupt disappears fran the screen or
     flickers, it is probably a timing related problem and re-ordering
     the code will almost certainly solve the problem.

25.  Screens can be moved up and down memory using the OM0VE word. Each screen
     occupies 512 bytes and the addresses are listed in Table 1, the Table
     of Screen Addresses.

26.  If you are using the Background facility, the top 16 bytes of RAM will be
     used, so any data stored there will be corrupted.  To avoid this, make
     sure you have enough scrolling buffer and keep the top of sprite space
     below 65520.

27.  If you execute SETAM or SETAV in background, set the FLASH attribute
     in the background program.

28.  If you wish sprite space to "grow" upward use SPRITE and WIPE, otherwise
     always use ISPRITE and DSPRITE for sprite allocation.

29.  BAD RAMTOP error, usually means you have not RESERVED sufficient
     space for your BASIC program.