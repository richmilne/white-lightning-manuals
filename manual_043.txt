# TODO: Remove this comment once this file has been proofread

Fourth byte Holds the width of the sprite in characters fl to 255). Fifth byte Holds the height of the sprite in characters (1 to 255). 8*height*leryth bytes Pixel data.

Height•length bytes	Attribute data.

This means that the total space allocated to each sprite is 9*height*length+5 bytes.
Sprite numbers do not need to run sequentially, but the earlier a sprite is defined, the more rapid its access.


LOADING SPRITES FROM TAPE

Sprites saved to tape using the development software, can he loaded into the main program at the start of the session when the "UJAD SPRITES Y/N" prompt appears.
If sprites are loaded in this manner, the sprite data, together with the necessary pointers, will be loaded. SPST and SPND are automatically set and the sprites will be ready for use.
If sprites are saved and later loaded from White Lightning, SPST and SPND will need to be set by hand.
THE BUFFER
When vertical scrolling takes place, be it for pixel data or attributes, with or without wrap, data has to be temporarily stored for later retrieval. If a vertical scroll is executed by the foreground program then the buffer is pointed to by SPND, so the space immediately above sprites is used. When the sprite developrent software is used, a prrnpt is issued at the start of the session, which asks the user whether or not buffer size should be changed. If the buffer size is not changed then it remains 256 bytes long. The user can enter a larger or smaller value if preferred, though the default value of 256 will cover nest eventualities.
Scrolling attributes uses one byte for each column of the width, scrolling pixel data uses one byte for each column of the width, multiplied by the number of pixels being scrolled (the value held in NPX, see vertical scrolls). The buffer space need only be large enough to accamdate the largest scroll, as foreground scrolls will not take place simultaneously. Suppose a sprite or screen window 8 characters high by 4 characters wide is to be scrolled by 10 pixels. (The direction, i.e. the sign of NPX does not matter). The space required is 4* 10 = 40 bytes. If you find at sane later stage that you have not allv.ed enough buffer space, you can always relocate sprite space downward and likewise, if you have more than you need, you can relocate upwards.


BACKGROUND SCROLLING

When programs are executed in background (see Foreground/Background) it is risky to share a careen scrolling buffer, since the background program could execute while the foreground program is using the buffer. For this reason, a second buffer pointer is used for background scrolling. Tne variable holding the address of the background buffer is SPND'. When White Lightning is first entered, SPND' points to the 256 free bytes in the printer buffer at decimal 23296. The user can move this buffer by changing the value held in SRND'. It is not a bad idea to allocate enough buffer space, for both foreground and background scrolling above
43
sprite space and assign SPND' to point to the space after the foreground buffer. Suppose, for exac'p}e, the foreground program requires 200 bytes and the background 300 bytes, with the buffer currently set to 256 bytes. 500 bytes are needed in all, so sprites need to be relocated down by 500 - 256 = 244 bytes. Type:

-244 MLEN ! REUJCAI'E <Qt>

Note that MLEN is now negative since relocation is downward. SPND' should be set 200 bytes into the buffer to leave space for the foreground data. To do this type:

SPND Q 200 + SPND' I <(R>

If nrrnory is really tight and the buffer has to be shared, then the background program can be temporarily disabled using DI but as soon as the vertical scroll is executed, an El must be executed to re-enable the background program. If, for example, a screen window 12 characters wide and 4 characters high is to be scrolled vertically by 8 pixels with wrap, and the background program is to be inhibited, type:

0 0 AT 8 IVX 1 12 LEN 1 4 fGT ! 4 NL 1 4 ROW I DI W3iV El <(R>

It is best to re-enable the background program as soon as possible, preferably, as above, the next word.

Until you get used to the package leave the buffers as they are on entry to White Lightning. Use ISPRITE and O6PRi'1'k:, and not SPRITE and WIPE to define new sprites. The only time you really need worry about changing buffer sizes or positions is when you have a dire need to save a few extra bytes.
IDEAL MNEMONICS
1b get the best out of the White Lightning package, please read these next • sections carefully and note the parameters. The words have been selected so as to be as mnemonic as possible. To help yourself become aquainted with the language, it is weth noting the following:


1. Words which involve only the screen are postfixod with "V" for "Video Operations".

2. Words which involve only operations on or between sprites, are postfixed with "M" for "Memory Operations".

3. Words which involve operations between the screen and sprites are postfixsi with "S" for "Screen/Sprite" operations.

4. BLS implies that data is being "Block Shifted" to a destination and will replace whatever was there.

5. ORS implies that data is being "Shifted and 02'si" so the destination data will be ai'ed with the source data.

6. NDS implies that data is to be "Shifted and AND'oj". 7. XRS implies that data is to be "Shifted and XORIed". 8. ATY implies that the operation is on attribute data.
44