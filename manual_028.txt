I       : This will copy the loop index from the return stack onto the data 
          stack.

J       : This will push the value of the nested LOOP index to the stack.

K       : This will push the value of the double nested LOOP index to the stack. 



Type:

: TEST3 4 0 DO 4 0 DO 4 0 DO K J I . . . CR LOOP LOOP LOOP ; <CR>

Executing TEST3      1  1  1
will print:          1  1  2
                     1  1  3
                     .  .  .
                     .  .  .
                     .  .  .

and so on.


7. CONDITIONAL BRANCHING

Conditional branching must again he used only within a colon definition and uses 
the form:

IF (true part) ... (Forth WORDS) ... ENDIF

IF (true part) ... (Forth WORDS) ... ELSE (false part) ... (Forth WORDS) ... 
ENDIF

These conditional statements rely on testing the top number on the stack to decide
whether to execute the TRUE part, or the FALSE part of the condition.

If the top item on the stack is true (non-zero) then the true part will be 
executed.  If the top item is false (zero) then the true part will be skipped and 
execution of the false part will take place.  If the ELSE part is missing, then 
execution skips to just after the ENDIF statement.

There are several mathematical operators which will leave either a true (non-zero)
flag, or a false (zero) flag m the stack to be tested for by IF.

These are:

0<      :  This will leave a true flag on the stack if the number on the top
           of the stack is less than zero, otherwise it leaves a false flag.

e.g.    -4 0< <CR>
will leave a true flag (non-zero).

To see this, type:
        . <CR>
to print the top number on the stack, which is the flag.  This will print
        1
to show a true flag.

        914 0< . <CR>
will print a 0 (false flag).