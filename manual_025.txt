e.g.    1 2 3 ROT . CR . CR . <CR>
will print  1
            3
            2

since the stack before ROT was:
            3        TOS
            2
            1

and after ROT is:
            1        TOS
            3
            2


4. OTHER OPERATIONS


!       :  This will store the second number on the stack at the address held on
           the top of the stack. (pronounced "store").

e.g.    Suppose the stack is as follows:

        HEX C000     TOS
            FFEE

This will store FFEE at address C000/C001
i.e.    EE at C000
        FF at C001

If we key in HEX FF00 C000 ! <CR>
this will store FF00 at C000/C001
i.e     C000 contains low byte 00
        C001 contains high byte FF

Remember that each 16 bit number takes up 2 bytes.


@       :  This will replace the address held on the top of the stack, with the
           16 bit contents of that address. (Pronounced "at")

Suppose the memory contents are as follows:

Address:  6100 6101 6102 6103 6104 6105
Contents: 00   C3   8F   70   00   C3

then 6100 @ . <CR>
will print C300

If you wish to deal with single bytes, then a variation of the above will be
used.


C!      :  Will store a single byte held in the second number on the stack at the
           address held on the top of the stack.

e.g.    FF C000 C! <CR>
will store a single byte FF at address C000.