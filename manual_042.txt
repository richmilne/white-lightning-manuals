# TODO: Remove this comment once this file has been proofread

In the above example we set background variables from foreground. If we
were to set the background variables in the background program, then
foreground and background variables would already have been switched
before execution. To set up the same windows, we would now have to use
ROW, COL, HGT and LEN, and not ROW', COL', HGT' and LEN'.

To define a word to do this, type:
: FRED 6 LEN ! 4 HGT ! 1 ROW ! 2 COL ! WRL1V ; [CR]

To run "FRED" in background, type:
' FRED INT-ON [CR]

Since the variables were this time being assigned values in the background
program itself, the alternate variables set was being accessed with the
normal names. Now type:
INT-OFF FORGET FRED [CR]
to halt the background program and clear the definition.

Operating in this way, a word will work in foreground or background
without any need to change the variable names. The alternate variables are
only used directly by a foreground program that is required to change
background variables, or a background program that is required to change
foreground variables. If the previous example is a little confusing at
first, carry out your own experimentation until it becomes clear.


ERRORS

The graphics commands do not in many cases provide the user with error
messages, but instead, if an attempt is made to execute a command which is
not possible, for instance scrolling a screen window which lies partly off
the screen, the command will simply not execute. This does have the
advantage that the user is freed from testing edge conditions, but does
mean that a little extra care needs to be exercised. See the words ADJM
and ADJV. Errors are generated if an attempt is made to access a
non-existent sprite, or to insert an already existing sprite using
ISPRITE.


SPRITE AND BUFFER ORGANISATION

Before discussing the sprite manipulation commands in detail, it is worth
describing the organisation of sprites in some detail. The user does not
need this information, but it is made available for interest and an
overall appreciation of the language structure.

Sprites are stored as one contiguous block of data whose start address is
held in the variable SPST. The first free byte after the final sprite
contains a zero and this address is held in the variable SPND. The format
of each sprite is as follows:

1st byte    The sprite number, which must be in the range 1 to 255.
2nd & 3rd bytes    The address of the start of the next sprite.