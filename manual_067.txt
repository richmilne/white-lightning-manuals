FOREGROUND BACKGROUND


Mastering machine code does give most programmers access to the speed of 
commercial games, but often the smoothness and continuity are lacking.  One of the 
greatest difficulties facing any games designer is timing.  The basic problem is 
that some parts of the program need to execute at regular intervals, and trying to 
achieve this can involve a lot of calculation and wasted processor time.  The 
solution to this is to use interrupts to execute particular sections of code. 
White Lightning does this for you, using the words INT-ON and INT-OFF.

The Spectrum interrupt occurs 50 times a second, so background words can be 
executed at this frequency, or by counting interrupts, at lower frequencies.

If you list any of the screens 1 to 5, you will see that they are apparently 
filled with garbage.  This is because the area in memory occupied by these screens 
contains the machine code that enables the background facility.  If you are not 
intending to use this facility, then you can clear screens 1 to 5 and use them 
normally for source code.  If you do this, however, don't forget that you won't be 
able to use any of the graphics words in background mode, or the system will crash 
in no uncertain manner!

When an interrupt occurs, the foreground program stops exactly where it is, saves 
off its parameters and then executes the background word.  The background word 
will then execute fully before continuing execution of the foreground program, 
from the exact point at which it was halted.  Three important points should be 
bourne in mind.  Firstly, if the execution time of the background word exceeds a 
fiftieth of a sceond, it is not possible to execute it more than twenty five times 
a second, if it exceeds a twenty-fifth of a second, it can only be executed at 
half that frequency, and so on.  There is, however, no limit to the length of the 
background execution time itself.  Secondly, as the execution time approaches a 
fiftieth of a second, or some multiple of a fiftieth of a second, then less and 
less processor time will be available for the foreground program and sometimes it 
is necessary to extend the length of the background program to make the foreground 
program run more quickly, by reducing the frequency of the background program. 
Experimentation will familiarise the user with the techniques required for the 
best effects.  More foreground time can also be taken by disabling and then re-
enabling the interrupt using DI and EI respectively.  This brings us to the third, 
and most important point.  Remember that when an interrupt occurs, the foreground 
program will stop whatever it is doing, execute the background program and then 
continue with the foreground execution.  Suppose the background program is a 
sideways scroll of a user defined screen window and the foreground program PUTs a 
character into the window.  A problem arises if an interrupt occurs halfway 
through the PUT, because the top half of the character will be scrolled before the 
second half of the character is PUT to the screen.  To circumvent this problem, 
where an operation is carried out on the same screen or sprite data by both the 
foreground and background programs, the background program should be temporarily 
disabled using DI, the foreground word executed, and then the background program 
re-enabled using EI ready for the next interrupt to occur.  The safest way to 
proceed until you have really mastered the language, is to avoid the situation 
altogether and make sure the foreground and background programs don't operate on 
the same sprite or screen area.

To set the background program running, simply type an apostrophe (shifted 7), a 
space, the word to be executed, a space and then INT-ON.  Don't forget that if the 
background word does not set its own parameters, then these will need to be set 
before execution and if these are the IDEAL variables, then the alternate set will 
be used.